name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Exclude Python 3.11 on Windows due to some dependency issues
          - os: windows-latest
            python-version: '3.11'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests with coverage
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || '' }}
        USE_OPENAI: ${{ secrets.USE_OPENAI || 'false' }}
      run: |
        python run_tests.py --no-coverage
    
    - name: Run linters
      run: |
        python run_tests.py --lint-only
    
    - name: Run security checks
      run: |
        python run_tests.py --security-only

  documentation:
    name: Check Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
    
    - name: Check documentation builds
      run: |
        cd docs
        make html

  test-deploy:
    name: Test Deploy to TestPyPI
    needs: [test, documentation]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN || secrets.PYPI_API_TOKEN }}
      run: |
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "TEST_PYPI_API_TOKEN not set, skipping TestPyPI deployment"
          exit 0
        fi
        echo "Uploading to TestPyPI..."
        twine upload --repository-url https://test.pypi.org/legacy/ --skip-existing dist/*

  deploy:
    name: Deploy to PyPI Production
    needs: [test, documentation, test-deploy]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "PYPI_API_TOKEN not set, skipping PyPI deployment"
          exit 0
        fi
        echo "Uploading to PyPI..."
        twine upload --skip-existing dist/*
