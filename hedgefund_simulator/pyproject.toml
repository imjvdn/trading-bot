[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hedgefund-simulator"
version = "0.1.0"
description = "A modular AI hedge fund simulator for backtesting trading strategies"
readme = "README.md"
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "matplotlib>=3.4.0",
    "yfinance>=0.2.3",
    "scikit-learn>=1.0.0",
    "python-dotenv>=0.19.0",
    "tqdm>=4.62.0",
    "pyyaml>=6.0",
    "openai>=0.27.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.10.0",
    "flake8>=4.0.0",
    "mypy>=0.910",
    "black>=22.0.0",
    "isort>=5.10.0",
    "bandit>=1.7.0",
    "pre-commit>=2.17.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.12.0",
    "myst-parser>=0.18.0",
]

[project.scripts]
hedgefund-simulator = "hedgefund_simulator.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["hedgefund_simulator*"]

[tool.black]
line-length = 120
target-version = ["py38"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = false
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --cov=hedgefund_simulator --cov-report=term-missing"
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"

[tool.coverage.run]
source = ["hedgefund_simulator"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*__init__.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[bandit]
skips = ["B101"]  # Skip assert_used check in tests

disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v --cov=hedgefund_simulator --cov-report=term-missing"
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"

[tool.coverage.run]
source = ["hedgefund_simulator"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*__init__.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[bandit]
skips = ["B101"]  # Skip assert_used check in tests
